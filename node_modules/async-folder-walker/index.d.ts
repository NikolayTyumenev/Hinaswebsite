/**
 * AFWReturnType will return the return type of AFW for your given shaper.
 */
export type AFWReturnType<T> = T extends AsyncGenerator<infer U, any, any> ? U : never;
/**
 * Options object.
 */
export type AFWOpts<T> = {
    /**
     * =pathFilter - A pathFilter callback.
     */
    pathFilter: PathFilter;
    /**
     * =statFilter - A statFilter callback.
     */
    statFilter: StatFilter;
    /**
     * =[] - An array of .gitignore style strings of files to ignore.
     */
    ignore: string[];
    /**
     * =Infinity - The maximum number of folders to walk down into.
     */
    maxDepth: number;
    /**
     * =shaper - A shaper callback.
     */
    shaper: Shaper<T>;
};
export type Stats = import('fs').Stats;
/**
 * PathFilter lets you filter files based on a resolved `filepath`.
 */
export type PathFilter = (filepath: string) => boolean;
/**
 * statFilter lets you filter files based on a lstat object.
 */
export type StatFilter = (st: Stats) => boolean;
/**
 * FWStats is the object that the okdistribute/folder-walker module returns by default.
 */
export type FWStats = {
    /**
     * - The filepath of the directory where the walk started.
     */
    root: string;
    /**
     * - The resolved assolute path.
     */
    filepath: string;
    /**
     * - A fs.Stats instance.
     */
    stat: Stats;
    /**
     * - The relative path to `root`.
     */
    relname: string;
    /**
     * - The resolved filepath of the files containing directory.
     */
    basename: string;
};
/**
 * Shaper lets you change the shape of the returned file data from walk-time stats.
 */
export type Shaper<T> = (fwStats: FWStats) => T;
/**
  * AFWReturnType will return the return type of AFW for your given shaper.
  *
  * @template T
  * @typedef {T extends AsyncGenerator<infer U, any, any> ? U : never} AFWReturnType
  */
/**
 * Options object.
 *
 * @template T
 * @typedef {object} AFWOpts
 * @property {PathFilter} pathFilter=pathFilter - A pathFilter callback.
 * @property {StatFilter} statFilter=statFilter - A statFilter callback.
 * @property {string[]} ignore=[] - An array of .gitignore style strings of files to ignore.
 * @property {number} maxDepth=Infinity - The maximum number of folders to walk down into.
 * @property {Shaper<T>} shaper=shaper - A shaper callback.
 */
/**
 * Create an async generator that iterates over all folders and directories inside of `dirs`.
 *
 * @template T
 * @public
 * @param {string|string[]} dirs - The path or paths of the directory to walk.
 * @param {?Partial<AFWOpts<T>>} [opts] - Options used for the directory walk.
 * @yields {T} - An iterator that returns a value of type T.
 */
export function asyncFolderWalker<T>(dirs: string | string[], opts?: Partial<AFWOpts<T>> | null | undefined): AsyncGenerator<Awaited<T>, void, unknown>;
/**
 * Gives you all files from the directory walk as an array.
 *
 * @template T
 * @public
 * @param {string|string[]} dirs - The path of the directory to walk, or an array of directory paths.
 * @param {Partial<AFWOpts<T>>} [opts] - Options used for the directory walk.
 * @returns {Promise<T[]>} Array of files or any other result from the directory walk.
 */
export function allFiles<T>(dirs: string | string[], opts?: Partial<AFWOpts<T>> | undefined): Promise<T[]>;
/**
 * Async iterable collector.
 *
 * @template T
 * @public
 * @param {AsyncIterableIterator<T>} iterator - The iterator to collect into an array.
 * @returns {Promise<T[]>} Array of items collected from the iterator.
 */
export function all<T>(iterator: AsyncIterableIterator<T>): Promise<T[]>;
//# sourceMappingURL=index.d.ts.map