export function usage(options: ArgscloptsParseArgsOptionsConfig): string;
export function readPkg(pkgPath: string): Promise<{
    name: string;
    version: string;
}>;
export function header({ pkgPath, name, headerFn, exampleFn }: {
    pkgPath?: string | undefined;
    name?: string | undefined;
    headerFn?: FormatterFunction | undefined;
    exampleFn?: FormatterFunction | undefined;
}): Promise<string>;
export function footer({ pkgPath, name, version, footerFn }: {
    pkgPath?: string | undefined;
    name?: string | undefined;
    version?: string | undefined;
    footerFn?: FormatterFunction | undefined;
}): Promise<string>;
export function formatHelpText({ options, pkgPath, name, version, footerFn, headerFn, exampleFn }: {
    options: ArgscloptsParseArgsOptionsConfig;
    pkgPath?: string | undefined;
    name?: string | undefined;
    version?: string | undefined;
    headerFn?: FormatterFunction | undefined;
    exampleFn?: FormatterFunction | undefined;
    footerFn?: FormatterFunction | undefined;
}): Promise<string>;
export function printHelpText({ options, pkgPath, name, version, footerFn, headerFn, exampleFn }: {
    options: ArgscloptsParseArgsOptionsConfig;
    pkgPath?: string | undefined;
    name?: string | undefined;
    version?: string | undefined;
    headerFn?: FormatterFunction | undefined;
    exampleFn?: FormatterFunction | undefined;
    footerFn?: FormatterFunction | undefined;
}): Promise<void>;
export type FormatterFunction = (arg: {
    name?: string | undefined;
    version?: string | undefined;
}) => string;
export type ParseArgsConfig = import("node:util").ParseArgsConfig;
export type ParseArgsOptionsConfig = Exclude<ParseArgsConfig["options"], undefined>;
export type ParseArgsOptionConfig = ParseArgsOptionsConfig[string];
export type ArgscloptsOptions = {
    help?: string;
    helpLabel?: string;
};
export type ArgscloptsParseArgsOptionsConfig = Record<string, ArgscloptsOptions & ParseArgsOptionConfig>;
//# sourceMappingURL=index.d.ts.map